.create table AADNonInteractiveUserSignInLogsRaw (Records:dynamic)

.create table AADNonInteractiveUserSignInLogsRaw ingestion json mapping 'AADNonInteractiveUserSignInLogsRawMapping' '[{"column":"Records","Properties":{"path":"$.records"}}]'

.alter-merge table AADNonInteractiveUserSignInLogsRaw policy retention softdelete = 0d

.create table AADNonInteractiveUserSignInLogs (TenantId:string,SourceSystem:string,TimeGenerated:datetime,OperationName:string,OperationVersion:string,Category:string,ResultType:string,ResultSignature:string,ResultDescription:string,DurationMs:string,CorrelationId:string,ResourceGroup:string,Identity:string,Level:string,Location:string,AlternateSignInName:string,AppDisplayName:string,AppId:string,AppliedEventListeners:dynamic,AppOwnerTenantId:string,AuthenticationContextClassReferences:string,AuthenticationDetails:string,AuthenticationMethodsUsed:string,AuthenticationProcessingDetails:string,AuthenticationProtocol:string,AuthenticationRequirement:string,AuthenticationRequirementPolicies:string,AutonomousSystemNumber:string,ClientAppUsed:string,ClientCredentialType:string,ConditionalAccessPolicies:string,ConditionalAccessPoliciesV2:dynamic,ConditionalAccessStatus:string,CreatedDateTime:datetime,CrossTenantAccessType:string,DeviceDetail:string,FederatedCredentialId:string,GlobalSecureAccessIpAddress:string,HomeTenantId:string,HomeTenantName:string,Id:string,IncomingTokenType:string,IPAddress:string,IsInteractive:bool,IsRisky:bool,IsTenantRestricted:bool,IsThroughGlobalSecureAccess:bool,LocationDetails:string,MfaDetail:string,NetworkLocationDetails:string,OriginalRequestId:string,OriginalTransferMethod:string,ProcessingTimeInMs:string,ResourceDisplayName:string,ResourceIdentity:string,ResourceOwnerTenantId:string,ResourceServicePrincipalId:string,ResourceTenantId:string,RiskDetail:string,RiskEventTypes:string,RiskEventTypes_V2:string,RiskLevelAggregated:string,RiskLevelDuringSignIn:string,RiskState:string,ServicePrincipalId:string,SessionId:string,SessionLifetimePolicies:string,SignInEventTypes:string,SignInIdentifierType:string,TokenProtectionStatusDetails:string,Status:string,TokenIssuerName:string,TokenIssuerType:string,UniqueTokenIdentifier:string,UserAgent:string,UserDisplayName:string,UserId:string,UserPrincipalName:string,UserType:string,Type:string)

.create-or-alter function AADNonInteractiveUserSignInLogsExpand() {
    AADNonInteractiveUserSignInLogsRaw
| mv-expand events = Records | where events.Type == 'AADNonInteractiveUserSignInLogs' and isnotempty(events.TimeGenerated)
| project TenantId = tostring(events.TenantId),SourceSystem = tostring(events.SourceSystem),TimeGenerated = todatetime(events.TimeGenerated),OperationName = tostring(events.OperationName),OperationVersion = tostring(events.OperationVersion),Category = tostring(events.Category),ResultType = tostring(events.ResultType),ResultSignature = tostring(events.ResultSignature),ResultDescription = tostring(events.ResultDescription),DurationMs = tostring(events.DurationMs),CorrelationId = tostring(events.CorrelationId),ResourceGroup = tostring(events.ResourceGroup),Identity = tostring(events.Identity),Level = tostring(events.Level),Location = tostring(events.Location),AlternateSignInName = tostring(events.AlternateSignInName),AppDisplayName = tostring(events.AppDisplayName),AppId = tostring(events.AppId),AppliedEventListeners = todynamic(events.AppliedEventListeners),AppOwnerTenantId = tostring(events.AppOwnerTenantId),AuthenticationContextClassReferences = tostring(events.AuthenticationContextClassReferences),AuthenticationDetails = tostring(events.AuthenticationDetails),AuthenticationMethodsUsed = tostring(events.AuthenticationMethodsUsed),AuthenticationProcessingDetails = tostring(events.AuthenticationProcessingDetails),AuthenticationProtocol = tostring(events.AuthenticationProtocol),AuthenticationRequirement = tostring(events.AuthenticationRequirement),AuthenticationRequirementPolicies = tostring(events.AuthenticationRequirementPolicies),AutonomousSystemNumber = tostring(events.AutonomousSystemNumber),ClientAppUsed = tostring(events.ClientAppUsed),ClientCredentialType = tostring(events.ClientCredentialType),ConditionalAccessPolicies = tostring(events.ConditionalAccessPolicies),ConditionalAccessPoliciesV2 = todynamic(events.ConditionalAccessPoliciesV2),ConditionalAccessStatus = tostring(events.ConditionalAccessStatus),CreatedDateTime = todatetime(events.CreatedDateTime),CrossTenantAccessType = tostring(events.CrossTenantAccessType),DeviceDetail = tostring(events.DeviceDetail),FederatedCredentialId = tostring(events.FederatedCredentialId),GlobalSecureAccessIpAddress = tostring(events.GlobalSecureAccessIpAddress),HomeTenantId = tostring(events.HomeTenantId),HomeTenantName = tostring(events.HomeTenantName),Id = tostring(events.Id),IncomingTokenType = tostring(events.IncomingTokenType),IPAddress = tostring(events.IPAddress),IsInteractive = tobool(events.IsInteractive),IsRisky = tobool(events.IsRisky),IsTenantRestricted = tobool(events.IsTenantRestricted),IsThroughGlobalSecureAccess = tobool(events.IsThroughGlobalSecureAccess),LocationDetails = tostring(events.LocationDetails),MfaDetail = tostring(events.MfaDetail),NetworkLocationDetails = tostring(events.NetworkLocationDetails),OriginalRequestId = tostring(events.OriginalRequestId),OriginalTransferMethod = tostring(events.OriginalTransferMethod),ProcessingTimeInMs = tostring(events.ProcessingTimeInMs),ResourceDisplayName = tostring(events.ResourceDisplayName),ResourceIdentity = tostring(events.ResourceIdentity),ResourceOwnerTenantId = tostring(events.ResourceOwnerTenantId),ResourceServicePrincipalId = tostring(events.ResourceServicePrincipalId),ResourceTenantId = tostring(events.ResourceTenantId),RiskDetail = tostring(events.RiskDetail),RiskEventTypes = tostring(events.RiskEventTypes),RiskEventTypes_V2 = tostring(events.RiskEventTypes_V2),RiskLevelAggregated = tostring(events.RiskLevelAggregated),RiskLevelDuringSignIn = tostring(events.RiskLevelDuringSignIn),RiskState = tostring(events.RiskState),ServicePrincipalId = tostring(events.ServicePrincipalId),SessionId = tostring(events.SessionId),SessionLifetimePolicies = tostring(events.SessionLifetimePolicies),SignInEventTypes = tostring(events.SignInEventTypes),SignInIdentifierType = tostring(events.SignInIdentifierType),TokenProtectionStatusDetails = tostring(events.TokenProtectionStatusDetails),Status = tostring(events.Status),TokenIssuerName = tostring(events.TokenIssuerName),TokenIssuerType = tostring(events.TokenIssuerType),UniqueTokenIdentifier = tostring(events.UniqueTokenIdentifier),UserAgent = tostring(events.UserAgent),UserDisplayName = tostring(events.UserDisplayName),UserId = tostring(events.UserId),UserPrincipalName = tostring(events.UserPrincipalName),UserType = tostring(events.UserType),Type = tostring(events.Type)
}

.alter table AADNonInteractiveUserSignInLogs policy update @'[{"Source": "AADNonInteractiveUserSignInLogsRaw", "Query": "AADNonInteractiveUserSignInLogsExpand()", "IsEnabled": true, "IsTransactional": true}]'
