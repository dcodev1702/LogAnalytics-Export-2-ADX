.create table SigninLogsRaw (Records:dynamic)

.create table SigninLogsRaw ingestion json mapping 'SigninLogsRawMapping' '[{"column":"Records","Properties":{"path":"$.records"}}]'

.alter-merge table SigninLogsRaw policy retention softdelete = 0d

.create table SigninLogs (TenantId:string,SourceSystem:string,TimeGenerated:datetime,ResourceId:string,OperationName:string,OperationVersion:string,Category:string,ResultType:string,ResultSignature:string,ResultDescription:string,DurationMs:string,CorrelationId:string,Resource:string,ResourceGroup:string,ResourceProvider:string,Identity:string,Level:string,Location:string,AlternateSignInName:string,AppDisplayName:string,AppId:string,AuthenticationContextClassReferences:string,AuthenticationDetails:string,AppliedEventListeners:dynamic,AuthenticationMethodsUsed:string,AuthenticationProcessingDetails:string,AuthenticationRequirement:string,AuthenticationRequirementPolicies:string,ClientAppUsed:string,ConditionalAccessPolicies:dynamic,ConditionalAccessStatus:string,CreatedDateTime:datetime,DeviceDetail:dynamic,IsInteractive:bool,Id:string,IPAddress:string,IsRisky:bool,LocationDetails:dynamic,MfaDetail:dynamic,NetworkLocationDetails:string,OriginalRequestId:string,ProcessingTimeInMilliseconds:string,RiskDetail:string,RiskEventTypes:string,RiskEventTypes_V2:string,RiskLevelAggregated:string,RiskLevelDuringSignIn:string,RiskState:string,ResourceDisplayName:string,ResourceIdentity:string,ResourceServicePrincipalId:string,ServicePrincipalId:string,ServicePrincipalName:string,Status:dynamic,TokenIssuerName:string,TokenIssuerType:string,UserAgent:string,UserDisplayName:string,UserId:string,UserPrincipalName:string,AADTenantId:string,UserType:string,FlaggedForReview:bool,IPAddressFromResourceProvider:string,SignInIdentifier:string,SignInIdentifierType:string,ResourceTenantId:string,HomeTenantId:string,UniqueTokenIdentifier:string,SessionId:string,SessionLifetimePolicies:string,AutonomousSystemNumber:string,AuthenticationProtocol:string,CrossTenantAccessType:string,AuthenticationAppDeviceDetails:string,AuthenticationAppPolicyEvaluationDetails:string,ClientCredentialType:string,FederatedCredentialId:string,GlobalSecureAccessIpAddress:string,HomeTenantName:string,IncomingTokenType:string,IsTenantRestricted:bool,IsThroughGlobalSecureAccess:bool,OriginalTransferMethod:string,TokenProtectionStatusDetails:dynamic,AppliedConditionalAccessPolicies:string,RiskLevel:string,Type:string)

.create-or-alter function SigninLogsExpand() {
    SigninLogsRaw
| mv-expand events = Records | where events.Type == 'SigninLogs' and isnotempty(events.TimeGenerated)
| project TenantId = tostring(events.TenantId),SourceSystem = tostring(events.SourceSystem),TimeGenerated = todatetime(events.TimeGenerated),ResourceId = tostring(events.ResourceId),OperationName = tostring(events.OperationName),OperationVersion = tostring(events.OperationVersion),Category = tostring(events.Category),ResultType = tostring(events.ResultType),ResultSignature = tostring(events.ResultSignature),ResultDescription = tostring(events.ResultDescription),DurationMs = tostring(events.DurationMs),CorrelationId = tostring(events.CorrelationId),Resource = tostring(events.Resource),ResourceGroup = tostring(events.ResourceGroup),ResourceProvider = tostring(events.ResourceProvider),Identity = tostring(events.Identity),Level = tostring(events.Level),Location = tostring(events.Location),AlternateSignInName = tostring(events.AlternateSignInName),AppDisplayName = tostring(events.AppDisplayName),AppId = tostring(events.AppId),AuthenticationContextClassReferences = tostring(events.AuthenticationContextClassReferences),AuthenticationDetails = tostring(events.AuthenticationDetails),AppliedEventListeners = todynamic(events.AppliedEventListeners),AuthenticationMethodsUsed = tostring(events.AuthenticationMethodsUsed),AuthenticationProcessingDetails = tostring(events.AuthenticationProcessingDetails),AuthenticationRequirement = tostring(events.AuthenticationRequirement),AuthenticationRequirementPolicies = tostring(events.AuthenticationRequirementPolicies),ClientAppUsed = tostring(events.ClientAppUsed),ConditionalAccessPolicies = todynamic(events.ConditionalAccessPolicies),ConditionalAccessStatus = tostring(events.ConditionalAccessStatus),CreatedDateTime = todatetime(events.CreatedDateTime),DeviceDetail = todynamic(events.DeviceDetail),IsInteractive = tobool(events.IsInteractive),Id = tostring(events.Id),IPAddress = tostring(events.IPAddress),IsRisky = tobool(events.IsRisky),LocationDetails = todynamic(events.LocationDetails),MfaDetail = todynamic(events.MfaDetail),NetworkLocationDetails = tostring(events.NetworkLocationDetails),OriginalRequestId = tostring(events.OriginalRequestId),ProcessingTimeInMilliseconds = tostring(events.ProcessingTimeInMilliseconds),RiskDetail = tostring(events.RiskDetail),RiskEventTypes = tostring(events.RiskEventTypes),RiskEventTypes_V2 = tostring(events.RiskEventTypes_V2),RiskLevelAggregated = tostring(events.RiskLevelAggregated),RiskLevelDuringSignIn = tostring(events.RiskLevelDuringSignIn),RiskState = tostring(events.RiskState),ResourceDisplayName = tostring(events.ResourceDisplayName),ResourceIdentity = tostring(events.ResourceIdentity),ResourceServicePrincipalId = tostring(events.ResourceServicePrincipalId),ServicePrincipalId = tostring(events.ServicePrincipalId),ServicePrincipalName = tostring(events.ServicePrincipalName),Status = todynamic(events.Status),TokenIssuerName = tostring(events.TokenIssuerName),TokenIssuerType = tostring(events.TokenIssuerType),UserAgent = tostring(events.UserAgent),UserDisplayName = tostring(events.UserDisplayName),UserId = tostring(events.UserId),UserPrincipalName = tostring(events.UserPrincipalName),AADTenantId = tostring(events.AADTenantId),UserType = tostring(events.UserType),FlaggedForReview = tobool(events.FlaggedForReview),IPAddressFromResourceProvider = tostring(events.IPAddressFromResourceProvider),SignInIdentifier = tostring(events.SignInIdentifier),SignInIdentifierType = tostring(events.SignInIdentifierType),ResourceTenantId = tostring(events.ResourceTenantId),HomeTenantId = tostring(events.HomeTenantId),UniqueTokenIdentifier = tostring(events.UniqueTokenIdentifier),SessionId = tostring(events.SessionId),SessionLifetimePolicies = tostring(events.SessionLifetimePolicies),AutonomousSystemNumber = tostring(events.AutonomousSystemNumber),AuthenticationProtocol = tostring(events.AuthenticationProtocol),CrossTenantAccessType = tostring(events.CrossTenantAccessType),AuthenticationAppDeviceDetails = tostring(events.AuthenticationAppDeviceDetails),AuthenticationAppPolicyEvaluationDetails = tostring(events.AuthenticationAppPolicyEvaluationDetails),ClientCredentialType = tostring(events.ClientCredentialType),FederatedCredentialId = tostring(events.FederatedCredentialId),GlobalSecureAccessIpAddress = tostring(events.GlobalSecureAccessIpAddress),HomeTenantName = tostring(events.HomeTenantName),IncomingTokenType = tostring(events.IncomingTokenType),IsTenantRestricted = tobool(events.IsTenantRestricted),IsThroughGlobalSecureAccess = tobool(events.IsThroughGlobalSecureAccess),OriginalTransferMethod = tostring(events.OriginalTransferMethod),TokenProtectionStatusDetails = todynamic(events.TokenProtectionStatusDetails),AppliedConditionalAccessPolicies = tostring(events.AppliedConditionalAccessPolicies),RiskLevel = tostring(events.RiskLevel),Type = tostring(events.Type)
}

.alter table SigninLogs policy update @'[{"Source": "SigninLogsRaw", "Query": "SigninLogsExpand()", "IsEnabled": true, "IsTransactional": true}]'
