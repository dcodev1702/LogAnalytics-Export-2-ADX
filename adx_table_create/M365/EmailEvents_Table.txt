.create table EmailEventsRaw (Records:dynamic)

.create table EmailEventsRaw ingestion json mapping 'EmailEventsRawMapping' '[{"column":"Records","Properties":{"path":"$.records"}}]'

.alter-merge table EmailEventsRaw policy retention softdelete = 0d

.create table EmailEvents (TenantId:string,AttachmentCount:string,AuthenticationDetails:string,AdditionalFields:string,ConfidenceLevel:string,Connectors:string,DetectionMethods:string,DeliveryAction:string,DeliveryLocation:string,EmailClusterId:string,EmailDirection:string,EmailLanguage:string,EmailAction:string,EmailActionPolicy:string,EmailActionPolicyGuid:string,OrgLevelAction:string,OrgLevelPolicy:string,InternetMessageId:string,NetworkMessageId:string,RecipientEmailAddress:string,RecipientObjectId:string,ReportId:string,SenderDisplayName:string,SenderFromAddress:string,SenderFromDomain:string,SenderObjectId:string,SenderIPv4:string,SenderIPv6:string,SenderMailFromAddress:string,SenderMailFromDomain:string,Subject:string,ThreatTypes:string,ThreatNames:string,TimeGenerated:datetime,Timestamp:datetime,UrlCount:string,UserLevelAction:string,UserLevelPolicy:string,BulkComplaintLevel:string,LatestDeliveryLocation:string,LatestDeliveryAction:string,SourceSystem:string,Type:string)

.create-or-alter function EmailEventsExpand() {
    EmailEventsRaw
| mv-expand events = Records | where events.Type == 'EmailEvents' and isnotempty(events.TimeGenerated)
| project TenantId = tostring(events.TenantId),AttachmentCount = tostring(events.AttachmentCount),AuthenticationDetails = tostring(events.AuthenticationDetails),AdditionalFields = tostring(events.AdditionalFields),ConfidenceLevel = tostring(events.ConfidenceLevel),Connectors = tostring(events.Connectors),DetectionMethods = tostring(events.DetectionMethods),DeliveryAction = tostring(events.DeliveryAction),DeliveryLocation = tostring(events.DeliveryLocation),EmailClusterId = tostring(events.EmailClusterId),EmailDirection = tostring(events.EmailDirection),EmailLanguage = tostring(events.EmailLanguage),EmailAction = tostring(events.EmailAction),EmailActionPolicy = tostring(events.EmailActionPolicy),EmailActionPolicyGuid = tostring(events.EmailActionPolicyGuid),OrgLevelAction = tostring(events.OrgLevelAction),OrgLevelPolicy = tostring(events.OrgLevelPolicy),InternetMessageId = tostring(events.InternetMessageId),NetworkMessageId = tostring(events.NetworkMessageId),RecipientEmailAddress = tostring(events.RecipientEmailAddress),RecipientObjectId = tostring(events.RecipientObjectId),ReportId = tostring(events.ReportId),SenderDisplayName = tostring(events.SenderDisplayName),SenderFromAddress = tostring(events.SenderFromAddress),SenderFromDomain = tostring(events.SenderFromDomain),SenderObjectId = tostring(events.SenderObjectId),SenderIPv4 = tostring(events.SenderIPv4),SenderIPv6 = tostring(events.SenderIPv6),SenderMailFromAddress = tostring(events.SenderMailFromAddress),SenderMailFromDomain = tostring(events.SenderMailFromDomain),Subject = tostring(events.Subject),ThreatTypes = tostring(events.ThreatTypes),ThreatNames = tostring(events.ThreatNames),TimeGenerated = todatetime(events.TimeGenerated),Timestamp = todatetime(events.Timestamp),UrlCount = tostring(events.UrlCount),UserLevelAction = tostring(events.UserLevelAction),UserLevelPolicy = tostring(events.UserLevelPolicy),BulkComplaintLevel = tostring(events.BulkComplaintLevel),LatestDeliveryLocation = tostring(events.LatestDeliveryLocation),LatestDeliveryAction = tostring(events.LatestDeliveryAction),SourceSystem = tostring(events.SourceSystem),Type = tostring(events.Type)
}

.alter table EmailEvents policy update @'[{"Source": "EmailEventsRaw", "Query": "EmailEventsExpand()", "IsEnabled": true, "IsTransactional": true}]'
