.create table ASimDnsActivityLogsRaw ingestion json mapping 'ASimDnsActivityLogsRawMapping' '[{"column":"Records","Properties":{"path":"$.records"}}]'


.alter-merge table ASimDnsActivityLogsRaw policy retention softdelete = 0d


.create table ASimDnsActivityLogs (TenantId:string,TimeGenerated:datetime,EventCount:int,EventType:string,EventSubType:string,EventResult:string,EventResultDetails:string,EventOriginalType:string,EventProduct:string,EventVendor:string,DvcIpAddr:string,DvcHostname:string,DvcDomain:string,DvcDomainType:string,DvcOs:string,DvcOsVersion:string,AdditionalFields:string,SrcIpAddr:string,SrcPortNumber:int,SrcGeoCountry:string,SrcGeoRegion:string,SrcGeoCity:string,SrcGeoLatitude:real,SrcGeoLongitude:real,DstIpAddr:string,DstGeoCountry:string,DstGeoRegion:string,DstGeoCity:string,DstGeoLatitude:real,DstGeoLongitude:real,DnsQuery:string,DnsQueryType:int,DnsQueryTypeName:string,DnsResponseCode:int,DnsResponseName:string,TransactionIdHex:string,DstDescription:string,DstDvcScope:string,DstOriginalRiskLevel:string,DstRiskLevel:int,DvcDescription:string,DvcInterface:string,DvcOriginalAction:string,DvcScope:string,DvcScopeId:string,EventOriginalSeverity:string,NetworkProtocolVersion:string,RuleName:string,RuleNumber:int,DnsResponseIpCountry:string,DnsResponseIpLatitude:real,DnsResponseIpLongitude:real,NetworkProtocol:string,DnsQueryClass:int,DnsQueryClassName:string,DnsNetworkDuration:int,DnsFlagsAuthenticated:bool,DnsFlagsAuthoritative:bool,DnsFlagsRecursionDesired:bool,DnsSessionId:string,SrcDescription:string,SrcDvcScope:string,SrcDvcScopeId:string,SrcOriginalRiskLevel:string,SrcUserScope:string,SrcUserScopeId:string,SrcUserSessionId:string,ThreatId:string,ThreatIpAddr:string,ThreatField:string,UrlCategory:string,ThreatCategory:string,ThreatName:string,ThreatConfidence:int,ThreatOriginalConfidence:string,ThreatRiskLevel:int,ThreatOriginalRiskLevel_s:string,ThreatOriginalRiskLevel:int,ThreatIsActive:bool,ThreatFirstReportedTime:string,ThreatFirstReportedTime_d:datetime,ThreatLastReportedTime:string,ThreatLastReportedTime_d:datetime,EventStartTime:datetime,EventEndTime:datetime,EventMessage:string,EventOriginalUid:string,EventReportUrl:string,EventSchemaVersion:string,Dvc:string,DvcFQDN:string,DvcId:string,DvcIdType:string,DvcMacAddr:string,DvcZone:string,DnsResponseIpCity:string,DnsResponseIpRegion:string,EventOwner:string,EventProductVersion:string,EventSeverity:string,Src:string,SrcHostname:string,SrcDomain:string,SrcDomainType:string,SrcFQDN:string,SrcDvcId:string,SrcDvcIdType:string,SrcDeviceType:string,SrcRiskLevel:int,SrcUserId:string,SrcUserIdType:string,SrcUsername:string,SrcUsernameType:string,SrcUserType:string,SrcOriginalUserType:string,SrcProcessName:string,SrcProcessId:string,SrcProcessGuid:string,Dst:string,DstPortNumber:int,DstHostname:string,DstDomain:string,DstDomainType:string,DstFQDN:string,DstDvcId:string,DstDvcScopeId:string,DstDvcIdType:string,DstDeviceType:string,DvcAction:string,DnsFlags:string,DnsFlagsCheckingDisabled:bool,DnsFlagsRecursionAvailable:bool,DnsFlagsTruncated:bool,DnsFlagsZ:bool,SourceSystem:string,Type:string,_ResourceId:string)


.create-or-alter function ASimDnsActivityLogsExpand() {
    ASimDnsActivityLogsRaw
| mv-expand events = Records | where events.Type == 'ASimDnsActivityLogs' and isnotempty(events.TimeGenerated)
| project TenantId = tostring(events.TenantId),TimeGenerated = todatetime(events.TimeGenerated),EventCount = toint(events.EventCount),EventType = tostring(events.EventType),EventSubType = tostring(events.EventSubType),EventResult = tostring(events.EventResult),EventResultDetails = tostring(events.EventResultDetails),EventOriginalType = tostring(events.EventOriginalType),EventProduct = tostring(events.EventProduct),EventVendor = tostring(events.EventVendor),DvcIpAddr = tostring(events.DvcIpAddr),DvcHostname = tostring(events.DvcHostname),DvcDomain = tostring(events.DvcDomain),DvcDomainType = tostring(events.DvcDomainType),DvcOs = tostring(events.DvcOs),DvcOsVersion = tostring(events.DvcOsVersion),AdditionalFields = tostring(events.AdditionalFields),SrcIpAddr = tostring(events.SrcIpAddr),SrcPortNumber = toint(events.SrcPortNumber),SrcGeoCountry = tostring(events.SrcGeoCountry),SrcGeoRegion = tostring(events.SrcGeoRegion),SrcGeoCity = tostring(events.SrcGeoCity),SrcGeoLatitude = toreal(events.SrcGeoLatitude),SrcGeoLongitude = toreal(events.SrcGeoLongitude),DstIpAddr = tostring(events.DstIpAddr),DstGeoCountry = tostring(events.DstGeoCountry),DstGeoRegion = tostring(events.DstGeoRegion),DstGeoCity = tostring(events.DstGeoCity),DstGeoLatitude = toreal(events.DstGeoLatitude),DstGeoLongitude = toreal(events.DstGeoLongitude),DnsQuery = tostring(events.DnsQuery),DnsQueryType = toint(events.DnsQueryType),DnsQueryTypeName = tostring(events.DnsQueryTypeName),DnsResponseCode = toint(events.DnsResponseCode),DnsResponseName = tostring(events.DnsResponseName),TransactionIdHex = tostring(events.TransactionIdHex),DstDescription = tostring(events.DstDescription),DstDvcScope = tostring(events.DstDvcScope),DstOriginalRiskLevel = tostring(events.DstOriginalRiskLevel),DstRiskLevel = toint(events.DstRiskLevel),DvcDescription = tostring(events.DvcDescription),DvcInterface = tostring(events.DvcInterface),DvcOriginalAction = tostring(events.DvcOriginalAction),DvcScope = tostring(events.DvcScope),DvcScopeId = tostring(events.DvcScopeId),EventOriginalSeverity = tostring(events.EventOriginalSeverity),NetworkProtocolVersion = tostring(events.NetworkProtocolVersion),RuleName = tostring(events.RuleName),RuleNumber = toint(events.RuleNumber),DnsResponseIpCountry = tostring(events.DnsResponseIpCountry),DnsResponseIpLatitude = toreal(events.DnsResponseIpLatitude),DnsResponseIpLongitude = toreal(events.DnsResponseIpLongitude),NetworkProtocol = tostring(events.NetworkProtocol),DnsQueryClass = toint(events.DnsQueryClass),DnsQueryClassName = tostring(events.DnsQueryClassName),DnsNetworkDuration = toint(events.DnsNetworkDuration),DnsFlagsAuthenticated = tobool(events.DnsFlagsAuthenticated),DnsFlagsAuthoritative = tobool(events.DnsFlagsAuthoritative),DnsFlagsRecursionDesired = tobool(events.DnsFlagsRecursionDesired),DnsSessionId = tostring(events.DnsSessionId),SrcDescription = tostring(events.SrcDescription),SrcDvcScope = tostring(events.SrcDvcScope),SrcDvcScopeId = tostring(events.SrcDvcScopeId),SrcOriginalRiskLevel = tostring(events.SrcOriginalRiskLevel),SrcUserScope = tostring(events.SrcUserScope),SrcUserScopeId = tostring(events.SrcUserScopeId),SrcUserSessionId = tostring(events.SrcUserSessionId),ThreatId = tostring(events.ThreatId),ThreatIpAddr = tostring(events.ThreatIpAddr),ThreatField = tostring(events.ThreatField),UrlCategory = tostring(events.UrlCategory),ThreatCategory = tostring(events.ThreatCategory),ThreatName = tostring(events.ThreatName),ThreatConfidence = toint(events.ThreatConfidence),ThreatOriginalConfidence = tostring(events.ThreatOriginalConfidence),ThreatRiskLevel = toint(events.ThreatRiskLevel),ThreatOriginalRiskLevel_s = tostring(events.ThreatOriginalRiskLevel_s),ThreatOriginalRiskLevel = toint(events.ThreatOriginalRiskLevel),ThreatIsActive = tobool(events.ThreatIsActive),ThreatFirstReportedTime = tostring(events.ThreatFirstReportedTime),ThreatFirstReportedTime_d = todatetime(events.ThreatFirstReportedTime_d),ThreatLastReportedTime = tostring(events.ThreatLastReportedTime),ThreatLastReportedTime_d = todatetime(events.ThreatLastReportedTime_d),EventStartTime = todatetime(events.EventStartTime),EventEndTime = todatetime(events.EventEndTime),EventMessage = tostring(events.EventMessage),EventOriginalUid = tostring(events.EventOriginalUid),EventReportUrl = tostring(events.EventReportUrl),EventSchemaVersion = tostring(events.EventSchemaVersion),Dvc = tostring(events.Dvc),DvcFQDN = tostring(events.DvcFQDN),DvcId = tostring(events.DvcId),DvcIdType = tostring(events.DvcIdType),DvcMacAddr = tostring(events.DvcMacAddr),DvcZone = tostring(events.DvcZone),DnsResponseIpCity = tostring(events.DnsResponseIpCity),DnsResponseIpRegion = tostring(events.DnsResponseIpRegion),EventOwner = tostring(events.EventOwner),EventProductVersion = tostring(events.EventProductVersion),EventSeverity = tostring(events.EventSeverity),Src = tostring(events.Src),SrcHostname = tostring(events.SrcHostname),SrcDomain = tostring(events.SrcDomain),SrcDomainType = tostring(events.SrcDomainType),SrcFQDN = tostring(events.SrcFQDN),SrcDvcId = tostring(events.SrcDvcId),SrcDvcIdType = tostring(events.SrcDvcIdType),SrcDeviceType = tostring(events.SrcDeviceType),SrcRiskLevel = toint(events.SrcRiskLevel),SrcUserId = tostring(events.SrcUserId),SrcUserIdType = tostring(events.SrcUserIdType),SrcUsername = tostring(events.SrcUsername),SrcUsernameType = tostring(events.SrcUsernameType),SrcUserType = tostring(events.SrcUserType),SrcOriginalUserType = tostring(events.SrcOriginalUserType),SrcProcessName = tostring(events.SrcProcessName),SrcProcessId = tostring(events.SrcProcessId),SrcProcessGuid = tostring(events.SrcProcessGuid),Dst = tostring(events.Dst),DstPortNumber = toint(events.DstPortNumber),DstHostname = tostring(events.DstHostname),DstDomain = tostring(events.DstDomain),DstDomainType = tostring(events.DstDomainType),DstFQDN = tostring(events.DstFQDN),DstDvcId = tostring(events.DstDvcId),DstDvcScopeId = tostring(events.DstDvcScopeId),DstDvcIdType = tostring(events.DstDvcIdType),DstDeviceType = tostring(events.DstDeviceType),DvcAction = tostring(events.DvcAction),DnsFlags = tostring(events.DnsFlags),DnsFlagsCheckingDisabled = tobool(events.DnsFlagsCheckingDisabled),DnsFlagsRecursionAvailable = tobool(events.DnsFlagsRecursionAvailable),DnsFlagsTruncated = tobool(events.DnsFlagsTruncated),DnsFlagsZ = tobool(events.DnsFlagsZ),SourceSystem = tostring(events.SourceSystem),Type = tostring(events.Type),_ResourceId = tostring(events._ResourceId)
}


.alter table ASimDnsActivityLogs policy update @'[{"Source": "ASimDnsActivityLogsRaw", "Query": "ASimDnsActivityLogsExpand()", "IsEnabled": true, "IsTransactional": true}]'
